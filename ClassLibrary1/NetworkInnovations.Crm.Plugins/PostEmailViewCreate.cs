// <copyright file="PostOperationni_emailviewCreate.cs" company="">
// Copyright (c) 2017 All Rights Reserved
// </copyright>
// <author></author>
// <date>11/24/2017 10:13:56 AM</date>
// <summary>Implements the PostOperationni_emailviewCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Messages;
using NetworkInnovations.Crm.Core.Crm;
using NetworkInnovations.Crm.Core.Crm.Data;
using System.Reflection;
using NetworkInnovations.Plugins;

namespace NetworkInnovations.Crm.Plugins
{

    /// <summary>
    /// PostOperationni_emailviewCreate Plugin.
    /// </summary>    
    public class PostEmailViewCreate : Plugin
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostEmailViewCreate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PostEmailViewCreate(string unsecure, string secure)
            : base(typeof(PostEmailViewCreate))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(40, "Create", "ni_emailview", new Action<LocalPluginContext>(ExecutePostEmailViewCreate)));
            // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecutePostEmailViewCreate(LocalPluginContext localContext)
        {
            if (localContext == null)
            {
                throw new InvalidPluginExecutionException("localContext");
            }

            IPluginExecutionContext context = localContext.PluginExecutionContext;
            IOrganizationService service = localContext.OrganizationService;

            if (context.InputParameters.Contains("Target") &&
                context.InputParameters["Target"] is Entity)
            {
                using (var svcContext = new NISvcContext(localContext.OrganizationService))
                {
                    var emailview_entity = ((Entity)context.InputParameters["Target"]).ToEntity<ni_emailview>();
                    var emailview_entity_postimage = ((Entity)context.PostEntityImages["PostImage"]).ToEntity<ni_emailview>();

                    // Retrieve support queue email
                    var supportQueue = Utilities.GetSupportQueue(svcContext);

                    // Retrieve to and CC emails from the view
                    char[] delimiterChars = { ';' };

                    var toEmails = emailview_entity_postimage.ni_To != null
                        ? emailview_entity_postimage.ni_To
                            .Split(delimiterChars)
                            .ToList()
                        : new List<string>();

                    var ccEmails = emailview_entity_postimage.ni_CC != null
                        ? emailview_entity_postimage.ni_CC
                            .Split(delimiterChars)
                            .ToList()
                        : new List<string>();

                    // Get all emails that don't match CRM support, and move them to the CC list
                    var moveToCCList = toEmails.Where(e => string.Compare(e, supportQueue.EMailAddress, true) != 0).ToList();
                    if (moveToCCList != null && moveToCCList.Count > 0)
                    {
                        toEmails.RemoveAll(e => moveToCCList.Contains(e));
                        ccEmails.AddRange(moveToCCList);
                    }

                    // Get or create contacts for all CC emails
                    var ccParties = new List<ActivityParty>();
                    if (ccEmails != null && ccEmails.Count > 0)
                    {
                        var saveChanges = false;
                        foreach (string ccemail in ccEmails)
                        {
                            var contact = svcContext.ContactSet
                                .Where(e => e.EMailAddress1 != null && e.EMailAddress1 == ccemail)
                                .FirstOrDefault();

                            // doesn't exist - create new
                            if (contact == null)
                            {
                                saveChanges = true;
                                contact = new Contact
                                {
                                    ContactId = Guid.NewGuid(),
                                    LastName = ccemail,
                                    EMailAddress1 = ccemail
                                };

                                svcContext.AddObject(contact);
                            }

                            var ccParty = new ActivityParty
                            {
                                PartyId = contact.ToEntityReference()
                            };

                            ccParties.Add(ccParty);
                        }

                        if (saveChanges) svcContext.SaveChanges();
                    }

                    // Get or Create contacts for all To emails
                    var toParties = new List<ActivityParty>();
                    if (toEmails != null && toEmails.Count > 0)
                    {
                        var saveChanges = false;
                        foreach (string toEmail in toEmails)
                        {
                            // don't create a contact for the queue. Simply add to queue.
                            if (string.Compare(toEmail, supportQueue.EMailAddress, true) == 0)
                            {
                                var queueParty = new ActivityParty
                                {
                                    PartyId = supportQueue.ToEntityReference()
                                };

                                toParties.Add(queueParty);

                                continue;
                            }

                            var contact = svcContext.ContactSet
                                .Where(e => e.EMailAddress1 != null && e.EMailAddress1 == toEmail)
                                .FirstOrDefault();

                            // doesn't exist - create new
                            if (contact == null)
                            {
                                saveChanges = true;
                                contact = new Contact
                                {
                                    ContactId = Guid.NewGuid(),
                                    LastName = toEmail,
                                    EMailAddress1 = toEmail
                                };

                                svcContext.AddObject(contact);
                            }

                            var toParty = new ActivityParty
                            {
                                PartyId = contact.ToEntityReference()
                            };

                            toParties.Add(toParty);
                        }

                        if (saveChanges) svcContext.SaveChanges();
                    }

                    // from contact - create if doesn't exist
                    var fromContact = svcContext.ContactSet
                        .Where(e => e.EMailAddress1 == emailview_entity_postimage.ni_From)
                        .FirstOrDefault();

                    if (fromContact == null)
                    {
                        fromContact = new Contact
                        {
                            ContactId = Guid.NewGuid(),
                            LastName = emailview_entity_postimage.ni_From,
                            EMailAddress1 = emailview_entity_postimage.ni_From
                        };

                        svcContext.AddObject(fromContact);
                        svcContext.SaveChanges();
                    }

                    var fromParty = new ActivityParty
                    {
                        PartyId = fromContact.ToEntityReference()
                    };

                    // Create Case
                    var Case = new Incident
                    {
                        Id = Guid.NewGuid(),
                        Title = emailview_entity_postimage.ni_Subject,
                        CustomerId = fromContact.ToEntityReference(),
                        ni_RelatedContactEmails = string.Join(";", ccEmails)
                    };

                    svcContext.AddObject(Case);
                    svcContext.SaveChanges();

                    // Create an email with the EntityCollection
                    var email = new Email
                    {
                        ActivityId = Guid.NewGuid(),
                        From = new ActivityParty[] { fromParty },
                        To = toParties,
                        Cc = ccParties,
                        Subject = emailview_entity_postimage.ni_Subject,
                        Description = emailview_entity_postimage.ni_Body,
                        RegardingObjectId = Case.ToEntityReference()
                    };

                    // tie back to original emailView entity
                    if (!svcContext.IsAttached(emailview_entity))
                    {
                        emailview_entity.EntityState = EntityState.Unchanged;
                        svcContext.Attach(emailview_entity);
                    }

                    emailview_entity.ni_GeneratedEmail = email.ToEntityReference();

                    svcContext.AddObject(email);
                    svcContext.UpdateObject(emailview_entity);
                    svcContext.SaveChanges();
                }
            }
        }
    }
}
