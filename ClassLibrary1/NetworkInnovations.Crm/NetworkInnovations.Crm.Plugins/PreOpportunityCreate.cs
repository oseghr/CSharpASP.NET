// <copyright file="PreOpportunityCreate.cs" company="">
// Copyright (c) 2017 All Rights Reserved
// </copyright>
// <author></author>
// <date>8/23/2017 2:26:55 PM</date>
// <summary>Implements the PreOpportunityCreate Plugin.</summary>
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
// </auto-generated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.ServiceModel;
using Microsoft.Xrm.Sdk;
using NetworkInnovations.Crm.Core.Crm;
using NetworkInnovations.Crm.Core.Crm.Data;
using System.Reflection;
using NetworkInnovations.Plugins;

namespace NetworkInnovations.Crm.Plugins
{

    /// <summary>
    /// PreOpportunityCreate Plugin.
    /// </summary>    
    public class PreOpportunityCreate: Plugin
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PreOpportunityCreate"/> class.
        /// </summary>
        /// <param name="unsecure">Contains public (unsecured) configuration information.</param>
        /// <param name="secure">Contains non-public (secured) configuration information. 
        /// When using Microsoft Dynamics 365 for Outlook with Offline Access, 
        /// the secure string is not passed to a plug-in that executes while the client is offline.</param>
        public PreOpportunityCreate(string unsecure, string secure)
            : base(typeof(PreOpportunityCreate))
        {
            base.RegisteredEvents.Add(new Tuple<int, string, string, Action<LocalPluginContext>>(20, "Create", "opportunity", new Action<LocalPluginContext>(ExecutePreOpportunityCreate)));
            // TODO: Implement your custom configuration handling.
        }


        /// <summary>
        /// Main entry point for he business logic that the plug-in is to execute.
        /// </summary>
        /// <param name="localContext">The <see cref="LocalPluginContext"/> which contains the
        /// <see cref="IPluginExecutionContext"/>,
        /// <see cref="IOrganizationService"/>
        /// and <see cref="ITracingService"/>
        /// </param>
        /// <remarks>
        /// For improved performance, Microsoft Dynamics 365 caches plug-in instances.
        /// The plug-in's Execute method should be written to be stateless as the constructor
        /// is not called for every invocation of the plug-in. Also, multiple system threads
        /// could execute the plug-in at the same time. All per invocation state information
        /// is stored in the context. This means that you should not use global variables in plug-ins.
        /// </remarks>
        protected void ExecutePreOpportunityCreate(LocalPluginContext localContext)
        {
            IPluginExecutionContext context = localContext.PluginExecutionContext;
            IOrganizationService service = localContext.OrganizationService;

            if (context.InputParameters.Contains("Target") &&
                context.InputParameters["Target"] is Entity)
            {
                try
                {
                    using (var svcContext = new NISvcContext(localContext.OrganizationService))
                    {
                        var opportunity_entity = ((Entity)context.InputParameters["Target"]).ToEntity<Opportunity>();

                        // ensure that defaults are set
                        Utilities.EnsureDefaultScotsmanValues(ref opportunity_entity, null);

                        // calculate values
                        var num = (MatchFunc(opportunity_entity.ni_Doestheprospectneedourservicesnow != null ? opportunity_entity.ni_Doestheprospectneedourservicesnow.Value : 0) * opportunity_entity.ni_immediateserviceweighing +
                                MatchFunc(opportunity_entity.ni_Isthereenoughbudget != null ? opportunity_entity.ni_Isthereenoughbudget.Value : 0) * opportunity_entity.ni_budgetweighing +
                                MatchFunc(opportunity_entity.ni_HowismycontactwiththeDMU != null ? opportunity_entity.ni_HowismycontactwiththeDMU.Value : 0) * opportunity_entity.ni_dmuweighing +
                                MatchFunc(opportunity_entity.ni_DoIknowthecompletedecisionprocess != null ? opportunity_entity.ni_DoIknowthecompletedecisionprocess.Value : 0) * opportunity_entity.ni_decisionprocessweighing +
                                MatchFunc(opportunity_entity.ni_Dowehavecompetition != null ? opportunity_entity.ni_Dowehavecompetition.Value : 0) * opportunity_entity.ni_competitionweighing +
                                MatchFunc(opportunity_entity.ni_Dowemeettheirexactrequirements != null ? opportunity_entity.ni_Dowemeettheirexactrequirements.Value : 0) * opportunity_entity.ni_exactrequirementsweighing +
                                MatchFunc(opportunity_entity.ni_Didtheprospectgiveuspurchaseindications != null ? opportunity_entity.ni_Didtheprospectgiveuspurchaseindications.Value : 0) * opportunity_entity.ni_purchaseindicationsweighing +
                                MatchFunc(opportunity_entity.ni_DoestheprospecthaveexperienceswithNI != null ? opportunity_entity.ni_DoestheprospecthaveexperienceswithNI.Value : 0) * opportunity_entity.ni_experienceswithniweighing) * 100;

                        var denom = (opportunity_entity.ni_immediateserviceweighing + opportunity_entity.ni_budgetweighing + opportunity_entity.ni_dmuweighing +
                                opportunity_entity.ni_decisionprocessweighing + opportunity_entity.ni_competitionweighing + opportunity_entity.ni_exactrequirementsweighing +
                                opportunity_entity.ni_purchaseindicationsweighing + opportunity_entity.ni_experienceswithniweighing) * 4;

                        if (num != null && denom != null) { 
                            var match = Math.Round((double)num / (double)denom);
                            opportunity_entity.ni_Match = (int)match;
                        } else
                        {
                            opportunity_entity.ni_Match =  0;
                        }
                    }
                }
                catch (Exception ex)
                {
                    throw new InvalidPluginExecutionException("An error occurred in the plug-in.", ex);
                }
            }
            // TODO: Implement your custom Plug-in business logic.
        }
        public int MatchFunc(int? Value)
        {
            int MatchedPosition = 0;
            if (Value == 157530000)
            {
                MatchedPosition = 1;
            }
            else if (Value == 157530001)
            {
                MatchedPosition = 2;
            }
            else if (Value == 157530002)
            {
                MatchedPosition = 3;
            }
            else if (Value == 157530003)
            {
                MatchedPosition = 4;
            }

            return MatchedPosition;
        }
    }
}
